1-An exception denotes an error or event that disrupts the normal flow of code execution.
=================================================2-what happens when an exception occurs?
*code execution halts
*any DML operations that were processed before the exception are rolled back and are not committed to the database.
*Exceptions get logged in debug logs.
*the end user sees an error message in the salesforce user interface
*for unhandled exceptions, that the code doesnt catch, salesforce sends an email that include the exception infos.

===================================================3-Types of Exceptions:
*System defined
  -DML
  -List
  -NullPointer
  -Query
*Custom or User-defined
  -Generic exception
==============================================4-Exceptions statements
*throw statements
used to generate an exception or signal that an exception occurred.

*Try-catch-finally statements
capture an exception and handle it.
catch is optional so a single try can have 0 or more catch where each catch must have a unique exception type.
when one exception is caught , the remaining are not executed.
Finally block is mandatorily executed at the end whether the eception occured in the try block or not.

=============================================5- exception handling syntax
try {
} catch {
} catch{
} finally {
}
=============================================6-example
public class Exception0{
public static void myMethod(){
try {
integer a;
integer b = a*5;
}catch(Exception e){
System.debug('I catched the exception');
}
finally {
System.debug('no matter whether an eception in the try block occured or not ');
}
}
}
===============================================7-system exception
**********DML exception
try{
Account a = new Account();
insert a;
}
catch(DMLException de){
System.debug('record cannot be inserted'+ de.getMessage());
}
**********ListException
try{
List<String> list= new List<String>('Aman','Ashish','Deepika');
System.debug(list.get(0));
System.debug(list.get(1));
System.debug(list.get(2));
System.debug(list.get(3));
}catch(ListException le){
System.debug('there is no value on this index'+ le.getMessage());
}
**********NullPointer
example1:
try{
integr a;
integer b=a*8;

example2:
List<integer> l ;
l.add(30);

example3:
Account acc;
acc.Name='Disney';
} catch(NullPointerException npe){
System.debug('there is no object in the reference variable' + npe.getMessage());
}
**********QueryException
try{
Account a = [select name from account where name='disney'];
}catch(QueryException qe){
System.debug('There is a problem with this query'+ qe.getMessage());
}
*********sObjectException
try{
List<account> acclist= [select name from account];
for (account a: acclist){
System.debug(a.NumberOfEmployees);
}
}catch(sObjectException soe){
System.debug('There is a problem with this query'+ soe.getMessage());
}
***********************************************************8-Generic exception
we dont know which error is coming up.
try{
List<Account> accList = [select name from account];
for(account a: accList){
a.NumberOfEmployees=1000;
}
update accList;
}catch(){
System.debug('this is a generic '+ e.getMessage());
}
***********************************************************9-handling multiples exception

public class Exception0{
  public static void myMethod(){
    try {
          if(i==0) {
              integer a;
              integer b=a*5;
           } else if(i>0) {
               Account acc = new Account();
               insert acc;
            } else {
            List<Integer> iList = new Integer[]{1,2,3};
            integer sum = iList[0] + iList[1] + iList[2] + iList[3] ;
          }
        }
 catch(NullPointerException npe){
System.debug('there is no object in the reference variable' + npe.getMessage());
}
catch(DMLException de){
System.debug('record cannot be inserted'+ de.getMessage());
}
catch(ListException le){
System.debug('there is no value on this index'+ le.getMessage());
}
//generic exception
catch(Exception e){
System.debug('I execute when there is any other exception except DMLException or NullPointerException in the try block');
}
finally {
    System.debug('no matter whether an eception in the try block occured or not I will always execute');
 }
    }
}

***********************************************************10- Custom exception
public class NumberIsNegativeException extends Exception {
  public override String getMessage(){
  return 'Just a new Exception created by me for the negative number';
  }
}

public class ExceptionHandling5 {
    public static void myMethod(integer) {
        try{
            if(i<0) {
                NumberIsNegativeException n = new NumberIsNegativeException();
                throw n;
            }
            else {
                i = i * i * 10;
                System.debug(i);
            }
        }
        catch(NumberIsNegativeException ne){
            System.debug(ne.getMessage());
        }
    }
}

***********************************************************11-Common Exception Methods
System.debug(e.getCause()); //return the cause of the exception
System.debug(e.getLineNumber()); //return the line from where the exception was thrown
System.debug(e.getMessage()); //return the error message display for the user
System.debug(e.getStackTraceString()); //return the stack trace as a string
System.debug(e.getTypeName()); //return the type of exception

*************************************************************12-Exceptions that can not be caught
System.LimitException when the governor limit is exceeded such as:
-maximum number of SOQL
-when assertion statement fail through System.assert methods or licence exceptions

when Exception are uncatchable , catch blocks, finally block arent executed.
